{"version":3,"file":"neumorphic-utils.js","sourceRoot":"","sources":["../../../src/lib/neumorphic-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAmB,IAAI,EAAE,MAAM,MAAM,CAAA;AAC5C,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAA;AAExC,MAAM,UAAU,EAAE,CAAC,GAAG,MAAoB;IACxC,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;AAC9B,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,IAAY,EACZ,QAAgD,EAChD,eAAwC;IAExC,OAAO,CAAC,KAA8B,EAAE,EAAE;QACxC,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,CAAA;QAEtB,IAAI,KAAK,EAAE,CAAC;YACV,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;gBAC7C,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;oBAC1C,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAA;gBACpC,CAAC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC;QAED,IAAI,eAAe,EAAE,CAAC;YACpB,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;gBACvD,IAAI,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAG,GAAG,CAAC,CAAA,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;oBAC3D,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAA;gBACpC,CAAC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC;QAED,OAAO,EAAE,CAAC,GAAG,OAAO,CAAC,CAAA;IACvB,CAAC,CAAA;AACH,CAAC;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG;IAC9B,MAAM,EAAE,mBAAmB;IAC3B,OAAO,EAAE,oBAAoB;IAC7B,IAAI,EAAE,iBAAiB;IACvB,IAAI,EAAE,iBAAiB;IACvB,MAAM,EAAE,mBAAmB;IAC3B,KAAK,EAAE,kBAAkB;CACjB,CAAA","sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function neumorphicVariants(\n  base: string,\n  variants: Record<string, Record<string, string>>,\n  defaultVariants?: Record<string, string>,\n) {\n  return (props?: Record<string, string>) => {\n    const classes = [base]\n\n    if (props) {\n      Object.entries(props).forEach(([key, value]) => {\n        if (variants[key] && variants[key][value]) {\n          classes.push(variants[key][value])\n        }\n      })\n    }\n\n    if (defaultVariants) {\n      Object.entries(defaultVariants).forEach(([key, value]) => {\n        if (!props?.[key] && variants[key] && variants[key][value]) {\n          classes.push(variants[key][value])\n        }\n      })\n    }\n\n    return cn(...classes)\n  }\n}\n\nexport const neumorphicStyles = {\n  raised: \"neumorphic-raised\",\n  pressed: \"neumorphic-pressed\",\n  flat: \"neumorphic-flat\",\n  card: \"neumorphic-card\",\n  button: \"neumorphic-button\",\n  input: \"neumorphic-input\",\n} as const\n\nexport type NeumorphicStyle = keyof typeof neumorphicStyles\n"]}